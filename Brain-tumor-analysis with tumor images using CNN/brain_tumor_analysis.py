# -*- coding: utf-8 -*-
"""Brain-tumor-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v3gNzWxc2rIxTGFH27GRmxdzpXLh2wlS
"""

import os
import numpy as np
from PIL import Image
from functools import reduce
import tensorflow as tf
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dropout,Input,Flatten,Lambda,Dense,BatchNormalization
from tensorflow.keras.models import Sequential,Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Nadam

dir_folder = '/content/drive/MyDrive/datasets/Brain MRI'
print(os.path.exists(dir_folder))
# yes_dir = os.path.join(dir_folder,'yes')
# no_dir = os.path.join(dir_folder,'no')
# def extract_files(base1,base2):
#   yes_files = []
#   no_files = []
#   for i,j in zip(os.listdir(base1),os.listdir(base2)):
#       yes_full_path = os.path.join(base1,i)
#       no_full_path = os.path.join(base2,j)
#       yes_files.append(yes_full_path)
#       no_files.append(no_full_path)
#   return yes_files,no_files
# yes_files,no_files = extract_files(yes_dir,no_dir)

# def load_image(files,label_value):
#   images = []
#   labels = [label_value] * len(files)
#   for file in yes_files:
#       img = Image.open(file)
#       img = img.convert('L')
#       img = img.resize((224, 224))
#       img_array = np.array(img)
#       images.append(img_array)

#   result = np.stack(images, axis=0)

#   return result,labels

# # no_images,labels = load_image(no_files,0)
# yes_images,labels = load_image(yes_files,1)

train_gen = ImageDataGenerator(rescale=1./255,
                               validation_split=0.2,
                               rotation_range=40,
                               height_shift_range=0.2,
                               width_shift_range=0.2,
                               shear_range=0.2,
                               zoom_range=0.2,
                               fill_mode='nearest',
                               horizontal_flip=True)

train_generator = train_gen.flow_from_directory(dir_folder,
                                                target_size=(224,224),
                                                batch_size=32,
                                                class_mode='categorical',
                                                subset='training')

gray_scale_layer = Lambda(lambda x: tf.image.rgb_to_grayscale(x))

model = Sequential([
    gray_scale_layer,
    Conv2D(32,(3,3),activation='relu',input_shape=(224,224,1)),
    MaxPooling2D((2,2)),
    BatchNormalization(),
    Conv2D(64,(3,3),activation='relu'),
    MaxPooling2D((2,2)),
    BatchNormalization(),
    Conv2D(128,(3,3),activation='relu'),
    MaxPooling2D((2,2)),
    BatchNormalization(),
    Conv2D(256,(3,3),activation='relu',),
    MaxPooling2D((2,2)),
    BatchNormalization(),
    Flatten(),
    Dense(512,activation='relu'),
    BatchNormalization(),
    Dense(256,activation='relu'),
    BatchNormalization(),
    Dense(2,activation='softmax')
])
input_shape = Input(shape=(224,224,3))
Model(inputs=input_shape,outputs=model(input_shape))
model.compile(loss='categorical_crossentropy',optimizer=Nadam(learning_rate=0.01),metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=5,restore_best_weights=True)

epochs=20
model.fit(train_generator,
          callbacks=[early_stopping],
          steps_per_epoch=len(train_generator) // 32,
          epochs=epochs,
          )

classes = {
    0:'no',
    1:'yes'
}

def predict(file):
  img = Image.open(file)
  img = img.resize((224, 224))
  # img = img.convert('L')
  img = img.convert('RGB')  # Convert to RGB to match model input
  img = np.array(img)
  # Add a batch dimension
  img = np.expand_dims(img, axis=0)
  # Preprocess using the same function used for training
  # Rescale the image
  img = img / 255.0
  prediction = model.predict(img)
  return classes[np.argmax(prediction)]

file = '/content/drive/MyDrive/datasets/Brain MRI/yes/Y10.jpg'
predict(file)

model.save('/content/drive/MyDrive/models/model.keras')